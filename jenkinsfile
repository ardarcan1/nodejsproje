pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('DOCKERHUB_CREDENTIALS')
        IMAGE_NAME = 'nodejsarda' // Docker Hub'daki imaj adınız
        CONTAINER_NAME = 'nodejsarda' // Çalıştırmak istediğiniz container adı
        // Define your Slack credential ID
        SLACK_CREDENTIAL_ID = 'SLACK-WEBHOOK'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    def scmInfo = checkout([ 
                        $class: 'GitSCM', 
                        branches: [[name: '*/master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: 'https://github.com/ardarcan1/nodejsproje']]
                    ])
                    env.GIT_COMMIT_SHORT = scmInfo.GIT_COMMIT.take(7)
                }
            }
        }

        stage('Install') {
            steps {
                sh 'npm install'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${IMAGE_NAME}:${env.GIT_COMMIT_SHORT}")
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Mevcut container'ı durdur ve kaldır
                    sh "docker stop ${CONTAINER_NAME} || true"
                    sh "docker rm ${CONTAINER_NAME} || true"

                    // Yeni imaj ile container başlat ve 8000 portunu kullan
                    sh "docker run -d -p 8000:8000 --name ${CONTAINER_NAME} ${IMAGE_NAME}:${env.GIT_COMMIT_SHORT}"
                }
            }
        }

        stage('Login and push to AWS ECR') {
            steps {
                sh 'aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/h2n4d7m6'
                sh "docker tag ${IMAGE_NAME}:${env.GIT_COMMIT_SHORT} public.ecr.aws/h2n4d7m6/${IMAGE_NAME}:${env.GIT_COMMIT_SHORT}"
                sh "docker push public.ecr.aws/h2n4d7m6/${IMAGE_NAME}:${env.GIT_COMMIT_SHORT}"
            }
        }
    }

    post {
        success {
            withCredentials([string(credentialsId: 'SLACK-WEBHOOK', variable: 'SLACK_WEBHOOK_URL')]) {
                script {
                    def message = "SUCCESS: Job [${env.BUILD_NUMBER}] (${env.BUILD_URL} (${env.JOB_NAME}"
                    sh """
                        curl -X POST -H 'Content-type: application/json' \\
                        --data '{"text": "${message}"}' \\
                        \$SLACK_WEBHOOK_URL
                    """
                }
            }
        }
        failure {
            withCredentials([string(credentialsId: 'SLACK-WEBHOOK', variable: 'SLACK_WEBHOOK_URL')]) {
                script {
                    def message = "FAILURE: Job [${env.BUILD_NUMBER}] (${env.BUILD_URL} (${env.JOB_NAME}"
                    sh """
                        curl -X POST -H 'Content-type: application/json' \\
                        --data '{"text": "${message}"}' \\
                        \$SLACK_WEBHOOK_URL
                    """
                }
            }
        }
    }
}